    /* "../../SampleCode/pragmaTest.sol":61:251  contract Unique {... */
  mstore(0x40, 0x60)
  jumpi(tag_1, iszero(callvalue))
  0x0
  dup1
  revert
tag_1:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x0
  codecopy
  0x0
  return
stop

sub_0: assembly {
        /* "../../SampleCode/pragmaTest.sol":61:251  contract Unique {... */
      mstore(0x40, 0x60)
      jumpi(tag_1, lt(calldatasize, 0x4))
      calldataload(0x0)
      0x100000000000000000000000000000000000000000000000000000000
      swap1
      div
      0xffffffff
      and
      dup1
      0x4cefc55c
      eq
      tag_2
      jumpi
    tag_1:
      0x0
      dup1
      revert
        /* "../../SampleCode/pragmaTest.sol":131:249  function function1(string s, string y, bytes20 i) public returns (bytes20){... */
    tag_2:
      jumpi(tag_3, iszero(callvalue))
      0x0
      dup1
      revert
    tag_3:
      tag_4
      0x4
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      dup3
      add
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      dup3
      add
      swap2
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      dup3
      add
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      dup3
      add
      swap2
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap1
      dup1
      calldataload
      not(0xffffffffffffffffffffffff)
      and
      swap1
      0x20
      add
      swap1
      swap2
      swap1
      pop
      pop
      jump(tag_5)
    tag_4:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
    tag_5:
        /* "../../SampleCode/pragmaTest.sol":197:204  bytes20 */
      0x0
        /* "../../SampleCode/pragmaTest.sol":217:218  s */
      dup4
        /* "../../SampleCode/pragmaTest.sol":213:215  fn */
      0x0
        /* "../../SampleCode/pragmaTest.sol":213:218  fn =s */
      swap1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      tag_7
      swap3
      swap2
      swap1
      jump	// in(tag_8)
    tag_7:
      pop
        /* "../../SampleCode/pragmaTest.sol":230:231  y */
      dup3
        /* "../../SampleCode/pragmaTest.sol":226:228  ln */
      0x1
        /* "../../SampleCode/pragmaTest.sol":226:231  ln =y */
      swap1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      tag_9
      swap3
      swap2
      swap1
      jump	// in(tag_8)
    tag_9:
      pop
        /* "../../SampleCode/pragmaTest.sol":244:245  i */
      dup2
        /* "../../SampleCode/pragmaTest.sol":239:245  sId =i */
      not(0xffffffffffffffffffffffff)
      and
        /* "../../SampleCode/pragmaTest.sol":239:242  sId */
      0x3
        /* "../../SampleCode/pragmaTest.sol":239:245  sId =i */
      dup2
      not(0x0)
      and
      swap1
      sstore
      pop
        /* "../../SampleCode/pragmaTest.sol":131:249  function function1(string s, string y, bytes20 i) public returns (bytes20){... */
      swap4
      swap3
      pop
      pop
      pop
      jump	// out
        /* "../../SampleCode/pragmaTest.sol":61:251  contract Unique {... */
    tag_8:
      dup3
      dup1
      sload
      0x1
      dup2
      0x1
      and
      iszero
      0x100
      mul
      sub
      and
      0x2
      swap1
      div
      swap1
      0x0
      mstore
      keccak256(0x0, 0x20)
      swap1
      0x1f
      add
      0x20
      swap1
      div
      dup2
      add
      swap3
      dup3
      0x1f
      lt
      tag_11
      jumpi
      dup1
      mload
      not(0xff)
      and
      dup4
      dup1
      add
      or
      dup6
      sstore
      jump(tag_10)
    tag_11:
      dup3
      dup1
      add
      0x1
      add
      dup6
      sstore
      dup3
      iszero
      tag_10
      jumpi
      swap2
      dup3
      add
    tag_12:
      dup3
      dup2
      gt
      iszero
      tag_13
      jumpi
      dup3
      mload
      dup3
      sstore
      swap2
      0x20
      add
      swap2
      swap1
      0x1
      add
      swap1
      jump(tag_12)
    tag_13:
    tag_10:
      pop
      swap1
      pop
      tag_14
      swap2
      swap1
      jump	// in(tag_15)
    tag_14:
      pop
      swap1
      jump	// out
    tag_15:
      tag_16
      swap2
      swap1
    tag_17:
      dup1
      dup3
      gt
      iszero
      tag_18
      jumpi
      0x0
      dup2
      0x0
      swap1
      sstore
      pop
      0x1
      add
      jump(tag_17)
    tag_18:
      pop
      swap1
      jump
    tag_16:
      swap1
      jump	// out

    auxdata: 0xa165627a7a72305820d2f762d5c6c8949e2161013c7532527c9bb03d750ae521de037e6a30641ba00f0029
}
